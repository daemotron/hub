Source Code Repository
======================

.. _blessed-repository:

Stormrose uses `Git`_ for managing source code repositories. The project's "blessed" Git repository resides at
`GitHub`_. It is publicly accessible, but only :ref:`developers <developers>` and :ref:`core team members <core-team>`
can push into this blessed repository.


Repository Structure
--------------------

.. _protected-branches:

Protected Branches
~~~~~~~~~~~~~~~~~~

At least one branch within the Stormrose Hub repository is managed as `protected branch`_:

``master`` is the main development branch. Any code in ``master`` is automatically deployed to the staging environment.


.. _feature-branches:

Feature Branches
~~~~~~~~~~~~~~~~

Any other branch is considered as feature branch. Feature branches have to observe the following rules:

* Feature branches must be branched off ``master``
* Feature branches must relate to a GitHub issue
* By convention, their name shall be prefixed with the issue ID they refer to
* Feature branches merge back into ``master`` via :ref:`pull request <pull-request>`
* Feature branches are deleted after being merged back into ``master``


.. _git-workflow:

Git Workflow
------------

The Stormrose Project mostly follows the `Heroku Flow`_ for development. The following graph illustrates the flow:

.. image:: ../_static/Stormrose_Hub_Git_Workflow.png

The development of a new feature, or the improvement of an existing feature (including bug fixing) always starts with
opening an :doc:`issue <issues>`. Once the issue is created and assigned, a feature branch has to be created, following
this naming convention::

   <issue ID>-<class>-description

.. note::

   Please note that the branch name must comply with reference name rules (cf. `git check-ref-format`_).

The **Issue ID** is the numerical identifier generated by GitHub.

The **class** may be one of

* *hot* -- for security fixes, entailing high priority
* *fix* -- for normal bug fixes
* *new* -- for new features
* *imp* -- for optimisation or enhancement
* *oth* -- for other feature branches

.. code-block:: bash

   git fetch
   git checkout master
   git pull
   git checkout -b 1234-new-supergadget master

As soon as the feature branch is created and work has started, the related :ref:`issue status <issue-status>` should be
updated to "in progress".

.. important::

   Do not use issue closing hooks (e. g. ``Fixes #1234``) in your commit messages when committing to the feature branch.
   Closing the issue is reserved for the pull request.

Once the work on the feature branch is done and continuous integration testing shows positive results, a
:ref:`pull request <pull-request>` can be opened to notify the :ref:`core team <core-team>`. The
:ref:`status <issue-status>` of the corresponding issue should be updated to "ready".

In case of acceptance, the pull request is authorised by a core team member, the feature branch gets merged into
``master`` and is then deleted. The :ref:`issue status <issue-status>` is updated to "Staging", which means the
issue can now be tested on the staging system.


.. _pull-request:

Pull Request
------------

`GitHub Pull Requests`_ are used to merge new code from a :ref:`feature branch <feature-branches>` into a
:ref:`protected branch <protected-branches>` or from one protected branch into another.

This section concentrates on pull requests opened by :ref:`developers <developers>` in order to have a feature
branch merged into ``master``. Any other case, where pull requests are used (e. g. cleansing of branches etc.)
are processes solely played within the :ref:`core team <core-team>`.

.. hint::

   You can use a pull request for intermediate reviews with the core team. In that case, keep the
   :ref:`status <issue-status>` of the corresponding issue set to "in progress", prefix the merge
   request title with ``[WIP]`` and do **not** assign the pull request to anyone.

Pull requests may be accepted straight away (mostly in very simple cases, e. g. a simple bug fix) -- although this most
likely will rather be an exception. In such a case, the :ref:`status <issue-status>` of the corresponding issue will be
updated to "staging" by the core team member who accepted the pull request.

If otherwise the :ref:`core team <core-team>` accepts the pull request for review, they will update the
:ref:`issue status <issue-status>` to "Review" and assign a core team member to the pull request. In this
(much more likely) scenario, the core team member in charge will review the content of the change request and its
implications for the code in ``master`` together with the :ref:`developer <developers>` who opened the pull request.

.. note::

   Do not abuse pull requests to mature your code. As a general rule, a pull request should only be opened
   if implementation work on the feature branch is completed, and CI testing gives a green status.

In case of obvious immaturity or non-quality, non-compliance with governance and :doc:`coding style <code-style>`, a
pull request may be rejected by the core team. In such a case, the core team member rejecting the pull request shall
write a justification statement (as a comment on the pull request), explaining why this pull request has been
rejected.

.. _Git: http://git-scm.com/
.. _GitHub: https://github.com/stormrose-va/hub
.. _Heroku Flow: https://www.heroku.com/continuous-delivery
.. _protected branch: https://help.github.com/articles/about-protected-branches/
.. _git check-ref-format: https://www.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html
.. _GitHub Pull Requests: https://help.github.com/articles/about-pull-requests/
